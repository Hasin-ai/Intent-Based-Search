# main.py
from fastapi import FastAPI, HTTPException, Depends
import logging
from .db import get_db
from .models import Product

# Configure basic logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


app = FastAPI()


@app.post("/products/")
async def create_product(name: str, description: str, db=Depends(get_db)):
    try:
        product = Product(name=name, description=description)
        db.add(product)
        db.commit()
        db.refresh(product)
        logger.info(f"Created product: {name}")
        return product
    except Exception as e:
        logger.error(f"Error creating product: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/products/")
async def get_products(db=Depends(get_db)):
    try:
        products = db.query(Product).all()
        logger.info("Fetched all products")
        return products
    except Exception as e:
        logger.error(f"Error fetching products: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

#db.py

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from .models import Product
# Database configuration
DATABASE_URL = "postgresql://fahim:1234@localhost/ai_hackathon"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

#models.py

# from sqlalchemy import create_engine
# from sqlalchemy.ext.declarative import declarative_base
# from sqlalchemy.orm import sessionmaker

# DATABASE_URL = "postgresql://fahim:1234@localhost/ai_hackathon"

# engine = create_engine(DATABASE_URL)
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base = declarative_base()from .db import Base
from sqlalchemy import Column, Integer, String, Text

class Product(Base):
    __tablename__ = "product"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    description = Column(Text)




so modify my search endpoint with qdrant db. the architecture is given. modify so that its instantly runnable, keep the llm part commented for further implementation, use a dummy data for it to make it runnable. 
2. High-Level System Architecture

2.1 Logical Flow

User Query → captured from the frontend.

Embedding Generation → convert text into vector representations.

Vector Search (Similarity Matching) → retrieve candidate products from the vector database.

Results Ranking → apply ranking model (e.g., learning-to-rank) or business rules to sort candidates.

Response → return ranked list of products to the user.

Continuous Index Building → as new products or feedback arrive, update embeddings and re‑index.

2.2 Technical Stack

User → Nginx → FastAPI Service → Embeddings Generation (Python) → LLM Model API → Vector Database → FastAPI Service → Response

Nginx: SSL termination, caching, load balancing.

FastAPI: Hosts endpoints for query handling and index updates.

Embedding Generation: Uses a Python library 

LLM Model: Any hosted service (Gemini, custom) that returns embeddings.

Vector Database: Stores and searches high-dimensional vectors efficiently.